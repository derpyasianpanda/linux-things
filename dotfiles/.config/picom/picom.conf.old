#################################
#          Animations           #
#################################
transition-length = 150
transition-pow-x = 0.1
transition-pow-y = 0.1
transition-pow-w = 0.1
transition-pow-h = 0.1
size-transition = true

#################################
#             Shadows           #
#################################


# Enabled client-side shadows on windows. Note desktop windows 
# (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow, 
# unless explicitly requested using the wintypes option.
#
shadow = false

# The blur radius for shadows, in pixels. (defaults to 12)
shadow-radius = 5

# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
shadow-opacity = 0.0

# The left offset for shadows, in pixels. (defaults to -15)
shadow-offset-x = 5

# The top offset for shadows, in pixels. (defaults to -15)
shadow-offset-y = 5

# Red color value of shadow (0.0 - 1.0, defaults to 0).
shadow-red = 0.0

# Green color value of shadow (0.0 - 1.0, defaults to 0).
shadow-green = 0.0

# Blue color value of shadow (0.0 - 1.0, defaults to 0).
shadow-blue = 0.0

#################################
#           Fading              #
#################################


# Fade windows in/out when opening/closing and when opacity changes,
#  unless no-fading-openclose is used.
fading = true

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.04

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.04

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 10

# Specify a list of conditions of windows that should not be faded.
fade-exclude = []

#################################
#   Transparency / Opacity      #
#################################

# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
active-opacity = 1.0

# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
inactive-opacity = 1.0

# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
inactive-dim = 0

#################################
#     Background-Blurring       #
#################################


# Blur for xrender backend
#blur-method = "kernel"
#blur-kern = "5x5box"
#blur-background = true

# 9x9 Box blur kernel for mega Blurrr
#blur-kern = "9,9,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11"

# Can't use dual kawase w/o glx :(
# blur-method = "dual_kawase"

blur: {
  # requires: https://github.com/ibhagwan/picom
  method = "kawase";
  #method = "kernel";
  strength = 7;
  # deviation = 1.0;
  # kernel = "11x11gaussian";
  background = false;
  background-frame = false;
  background-fixed = false;
  kern = "3x3box";
}

#################################
#        Rounded Corners        #
#################################

corner-radius = 20.0
# rounded-corners-exclude = [
#   "class_g = 'URxvt'",
#   "class_g = 'XTerm'",
#   "class_g = 'Polybar'",
#   "class_g = 'code-oss'",
#   "class_g = 'TelegramDesktop'",
#   "class_g = 'firefox'",
#   "class_g = 'Thunderbird'",
#   "class_g = 'awesome'",
# ]

#################################
#       General Settings        #
#################################

# Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
# `xrender` is the default one.
#
# backend = "xrender"
backend = "glx"

# Enable/disable VSync.
vsync = false

# Detect '_NET_WM_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_OPACITY' of client windows to frame windows.
#
detect-client-opacity = true

# Specify refresh rate of the screen. If not specified or 0, picom will 
# try detecting this with X RandR extension.
#
refresh-rate = 144

# Unredirect all windows if a full-screen opaque window is detected, 
# to maximize performance for full-screen windows. Known to cause flickering 
# when redirecting/unredirecting windows.
#
unredir-if-possible = true

# Resize damaged region by a specific number of pixels. 
# A positive value enlarges it while a negative one shrinks it. 
# If the value is positive, those additional pixels will not be actually painted 
# to screen, only used in blur calculation, and such. (Due to technical limitations, 
# with use-damage, those pixels will still be incorrectly painted to screen.) 
# Primarily used to fix the line corruption issues of blur, 
# in which case you should use the blur radius value here 
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`, 
# with a 5x5 one you use `--resize-damage 2`, and so on). 
# May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
#
resize-damage = 1

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer. 
# Might cause incorrect opacity when rendering transparent content (but never 
# practically happened) and may not work with blur-background. 
# My tests show a 15% performance boost. Recommended.
#
glx-no-stencil = true

# GLX backend: Avoid rebinding pixmap on window damage. 
# Probably could improve performance on rapid window content changes, 
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
#
glx-no-rebind-pixmap = true

# Determine the use of damage information. 
# This causes the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
use-damage = true

# Use X Sync fence to sync clients' draw calls, to make sure all draw 
# calls are finished before picom starts drawing. Needed on nvidia-drivers with GLX backend for some users.
#
xrender-sync-fence = true

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter. 
# If using the "TRACE" log level, it's better to log into a file 
# using *--log-file*, since it can generate a huge stream of logs.
#
log-level = "warn"

# Set the log file.
# If *--log-file* is never specified, logs will be written to stderr. 
# Otherwise, logs will to written to the given file, though some of the early 
# logs might still be written to the stderr. 
# When setting this option from the config file, it is recommended to use an absolute path.
#
log-file = "~/.config/picom/logs"

# Show all X errors (for debugging)
# show-all-xerrors = false

# Window type settings
# 
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard: 
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility", 
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu", 
#     "tooltip", "notification", "combo", and "dnd".
# 
#
wintypes:
{
    tooltip = {
        fade = true shadow = false
        opacity = 0.75 focus = true
    }

    # dock = {
    #     full-shadow = true
    #     shadow-offset-x = 5
    #     shadow-offset-y = 5
    # }

    # normal = { full-shadow = true }
    dnd = { shadow = false }
    popup_menu = { opacity = 0.9 }
    dropdown_menu = { opacity = 0.9 }
}

